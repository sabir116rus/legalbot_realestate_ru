
import asyncio
from collections import defaultdict
from typing import DefaultDict
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    BotCommand,
    MenuButtonCommands,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
)
from aiogram.client.default import DefaultBotProperties
from openai import AsyncOpenAI

from config import Config
from services import AnswerService, ConsultationLogger, ConsentStore, InteractionLogger
from services.contact_validation import ContactValidationError, validate_contact
from rag import KnowledgeBase


config = Config.load()

bot = Bot(
    token=config.telegram_bot_token,
    default=DefaultBotProperties(parse_mode="HTML"),
)
dp = Dispatcher(storage=MemoryStorage())

consent_store = ConsentStore(config.consent_store_path)
consented_users: set[int] = set()
conversation_history: DefaultDict[int, list[dict[str, str]]] = defaultdict(list)
consent_lock = asyncio.Lock()

HISTORY_LIMIT = 10

WELCOME_MESSAGE = (
    "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø LegalBot</b> ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
    "üß≠ <b>–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:</b>\n"
    "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∂–∏–ª—å—è\n"
    "‚Ä¢ –ê—Ä–µ–Ω–¥–∞ –∏ –Ω–∞–π–º\n"
    "‚Ä¢ –ò–ø–æ—Ç–µ–∫–∞, –º–∞—Ç–∫–∞–ø–∏—Ç–∞–ª, —Å—É–±—Å–∏–¥–∏–∏\n"
    "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤, –†–æ—Å—Ä–µ–µ—Å—Ç—Ä, –≠–¶–ü\n"
    "‚Ä¢ –ó–µ–º–ª—è, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –¥–æ–ª–µ–≤–æ–µ —É—á–∞—Å—Ç–∏–µ\n\n"
    "üìå <b>–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:</b>\n"
    "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º\n"
    "‚Ä¢ –ó–∞–≥–ª—è–Ω–∏ –≤ /help –∑–∞ –ø—Ä–∏–º–µ—Ä–∞–º–∏\n\n"
    "<i>–û—Ç–≤–µ—Ç—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.</i>"
)


def _user_has_consented(user_id: int | None) -> bool:
    return user_id is not None and user_id in consented_users


async def _ensure_user_consent(message: Message) -> bool:
    if _user_has_consented(message.from_user.id if message.from_user else None):
        return True

    await message.answer(
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–Ø –¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ‚Ä¶¬ª –≤ /start."
    )
    return False


class ConsultationForm(StatesGroup):
    name = State()
    contact = State()
    request = State()


def setup_services() -> None:
    knowledge_base = KnowledgeBase(str(config.knowledge_base_path))
    openai_client = AsyncOpenAI(api_key=config.openai_api_key)

    answer_service = AnswerService(
        knowledge_base=knowledge_base,
        openai_client=openai_client,
        model=config.openai_model,
        system_prompt=config.system_prompt,
        rag_top_k=config.rag_top_k,
    )

    interaction_logger = InteractionLogger(config.log_path)
    consultation_logger = ConsultationLogger(config.consultation_log_path)

    dp.workflow_data.update(
        answer_service=answer_service,
        interaction_logger=interaction_logger,
        consultation_logger=consultation_logger,
    )

@dp.message(Command("start"))
async def cmd_start(m: Message):
    user_id = m.from_user.id if m.from_user else None
    if user_id is not None:
        conversation_history.pop(user_id, None)
    if _user_has_consented(user_id):
        await m.answer(WELCOME_MESSAGE)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É",
                    web_app=WebAppInfo(url=config.privacy_policy_webapp_url),
                )
            ],
            [
                InlineKeyboardButton(
                    text="–Ø –¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ‚Ä¶",
                    callback_data="consent_yes",
                ),
                InlineKeyboardButton(
                    text="–Ø –Ω–µ –¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ",
                    callback_data="consent_no",
                ),
            ],
        ]
    )

    await m.answer(config.privacy_policy_message, reply_markup=keyboard)

@dp.message(Command("help"))
async def cmd_help(m: Message):
    user_id = m.from_user.id if m.from_user else None
    if user_id is not None:
        conversation_history.pop(user_id, None)
    if not await _ensure_user_consent(m):
        return

    await m.answer(
        "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã?\n"
        "‚Ä¢ –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥–∞ –∏ –Ω–∞–π–º?\n\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "‚Äî –ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–π –¥–µ—Ç–∞–ª–∏ (—Ü–µ–ª—å, —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞, –∏–ø–æ—Ç–µ–∫–∞ –∏ —Ç. –¥.).\n"
        "‚Äî –Ø –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—é ¬´–ü—Ä–∞–≤–æ–≤—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è¬ª, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ."
    )


@dp.message(Command("consultation"))
async def cmd_consultation(m: Message, state: FSMContext):
    user_id = m.from_user.id if m.from_user else None
    if user_id is not None:
        conversation_history.pop(user_id, None)
    if not await _ensure_user_consent(m):
        return

    await state.set_state(ConsultationForm.name)
    await m.answer(
        "üìù <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è."
    )


@dp.message(ConsultationForm.name, F.text)
async def consultation_full_name(m: Message, state: FSMContext):
    if not await _ensure_user_consent(m):
        await state.clear()
        return

    await state.update_data(name=m.text.strip())
    await state.set_state(ConsultationForm.contact)
    await m.answer("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? –û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ –Ω–∏–∫ –≤ Telegram.")


@dp.message(ConsultationForm.contact, F.text)
async def consultation_contact(m: Message, state: FSMContext):
    if not await _ensure_user_consent(m):
        await state.clear()
        return

    raw_contact = m.text.strip()
    try:
        contact = validate_contact(raw_contact)
    except ContactValidationError as exc:
        await m.answer(str(exc))
        return

    await state.update_data(contact=contact)
    await state.set_state(ConsultationForm.request)
    await m.answer("–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞.")


@dp.message(ConsultationForm.request, F.text)
async def consultation_request(
    m: Message,
    state: FSMContext,
    consultation_logger: ConsultationLogger,
):
    if not await _ensure_user_consent(m):
        await state.clear()
        return

    data = await state.get_data()
    await state.clear()

    request_text = m.text.strip()

    consultation_logger.log(
        user_id=m.from_user.id,
        username=m.from_user.username,
        name=data.get("name", ""),
        contact=data.get("contact", ""),
        request=request_text,
    )

    await m.answer(
        "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. üëå\n"
        "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º."
    )


# –§–æ–ª–ª–±–µ–∫: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
@dp.message(F.text & (F.text.len() > 3) & ~F.text.startswith("/"))
async def any_text(
    m: Message,
    answer_service: AnswerService,
    interaction_logger: InteractionLogger,
):
    if not await _ensure_user_consent(m):
        return

    q = m.text.strip()
    user_id = m.from_user.id if m.from_user else None
    history = conversation_history[user_id] if user_id is not None else []
    await m.chat.do("typing")
    answer_result = await answer_service.generate_answer(
        q,
        history=history,
        history_limit=HISTORY_LIMIT,
    )
    interaction_logger.log(
        user_id=m.from_user.id,
        username=m.from_user.username,
        question=q,
        answer=answer_result.text,
        top_score=answer_result.top_score,
        model=answer_service.model,
        status=answer_result.status,
    )
    if user_id is not None:
        history.append({"role": "user", "content": q})
        history.append({"role": "assistant", "content": answer_result.text})
        if HISTORY_LIMIT > 0 and len(history) > HISTORY_LIMIT:
            del history[:-HISTORY_LIMIT]
    await m.answer(
        f"{answer_result.text}\n\n"
        "<i>–û—Ç–≤–µ—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.</i>"
    )


@dp.callback_query(F.data == "consent_yes")
async def consent_yes(callback: CallbackQuery):
    user_id = callback.from_user.id if callback.from_user else None
    if user_id is not None:
        async with consent_lock:
            await consent_store.add_consent(user_id)
            consented_users.add(user_id)

    await callback.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    if callback.message:
        await callback.message.answer(WELCOME_MESSAGE)


@dp.callback_query(F.data == "consent_no")
async def consent_no(callback: CallbackQuery):
    user_id = callback.from_user.id if callback.from_user else None
    if user_id is not None:
        async with consent_lock:
            await consent_store.remove_consent(user_id)
            consented_users.discard(user_id)
        conversation_history.pop(user_id, None)

    await callback.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    if callback.message:
        await callback.message.answer(
            "–ñ–∞–ª—å, —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤–µ—Ä–Ω–∏—Å—å –≤ /start."
        )

async def setup_bot_menu() -> None:
    await bot.set_my_commands(
        [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
            BotCommand(command="consultation", description="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"),
        ]
    )
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

async def main():
    setup_services()
    loaded_consents = await consent_store.load_consents()
    async with consent_lock:
        consented_users.update(loaded_consents)
    await setup_bot_menu()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
