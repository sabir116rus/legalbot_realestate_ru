
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, BotCommand, MenuButtonCommands
from aiogram.client.default import DefaultBotProperties
from openai import AsyncOpenAI

from config import Config
from services import AnswerService, InteractionLogger
from rag import KnowledgeBase


config = Config.load()

bot = Bot(
    token=config.telegram_bot_token,
    default=DefaultBotProperties(parse_mode="HTML"),
)
dp = Dispatcher()


def setup_services() -> None:
    knowledge_base = KnowledgeBase(str(config.knowledge_base_path))
    openai_client = AsyncOpenAI(api_key=config.openai_api_key)

    answer_service = AnswerService(
        knowledge_base=knowledge_base,
        openai_client=openai_client,
        model=config.openai_model,
        system_prompt=config.system_prompt,
        rag_top_k=config.rag_top_k,
    )

    interaction_logger = InteractionLogger(config.log_path)

    dp.workflow_data.update(
        answer_service=answer_service,
        interaction_logger=interaction_logger,
    )

@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø LegalBot</b> ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "üß≠ <b>–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:</b>\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∂–∏–ª—å—è\n"
        "‚Ä¢ –ê—Ä–µ–Ω–¥–∞ –∏ –Ω–∞–π–º\n"
        "‚Ä¢ –ò–ø–æ—Ç–µ–∫–∞, –º–∞—Ç–∫–∞–ø–∏—Ç–∞–ª, —Å—É–±—Å–∏–¥–∏–∏\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤, –†–æ—Å—Ä–µ–µ—Å—Ç—Ä, –≠–¶–ü\n"
        "‚Ä¢ –ó–µ–º–ª—è, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –¥–æ–ª–µ–≤–æ–µ —É—á–∞—Å—Ç–∏–µ\n\n"
        "üìå <b>–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "‚Ä¢ –ó–∞–≥–ª—è–Ω–∏ –≤ /help –∑–∞ –ø—Ä–∏–º–µ—Ä–∞–º–∏\n\n"
        "<i>–û—Ç–≤–µ—Ç—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.</i>"
    )

@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã?\n"
        "‚Ä¢ –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥–∞ –∏ –Ω–∞–π–º?\n\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "‚Äî –ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–π –¥–µ—Ç–∞–ª–∏ (—Ü–µ–ª—å, —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞, –∏–ø–æ—Ç–µ–∫–∞ –∏ —Ç. –¥.).\n"
        "‚Äî –Ø –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—é ¬´–ü—Ä–∞–≤–æ–≤—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è¬ª, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ."
    )

# –§–æ–ª–ª–±–µ–∫: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
@dp.message(F.text & (F.text.len() > 3) & ~F.text.startswith("/"))
async def any_text(
    m: Message,
    answer_service: AnswerService,
    interaction_logger: InteractionLogger,
):
    q = m.text.strip()
    await m.chat.do("typing")
    answer_result = await answer_service.generate_answer(q)
    interaction_logger.log(
        user_id=m.from_user.id,
        username=m.from_user.username,
        question=q,
        answer=answer_result.text,
        top_score=answer_result.top_score,
        model=answer_service.model,
        status=answer_result.status,
    )
    await m.answer(
        f"<b>–í–æ–ø—Ä–æ—Å:</b> {q}\n\n"
        f"{answer_result.text}\n\n"
        "<i>–û—Ç–≤–µ—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.</i>"
    )

async def setup_bot_menu() -> None:
    await bot.set_my_commands(
        [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
        ]
    )
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

async def main():
    setup_services()
    await setup_bot_menu()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
